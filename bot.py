# -*- coding: utf-8 -*-

import telebot
import time
from telebot import types
from datetime import datetime
import config
import dbworker
import auth
import exchange_rates_rss
import parsers
from helpers import *
import os


TOKEN = auth.TOKEN

session_handler = load_json()

ex = exchange_rates_rss.exchange_rates()
bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=["start"])
def welcome(message):
    global session_handler

    welcome_msg = f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n–ö–∞–∫–æ–π —è–∑—ã–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"

    if message.chat.id not in session_handler:
        session_handler[message.chat.id] = [message.from_user.first_name, "", [], [], [], config.States.START.value]
    else:
        session_handler[message.chat.id] = [message.from_user.first_name, "", [], [], [], config.States.START.value]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üáπüáØ Tajik")
    item2 = types.KeyboardButton("üá∑üá∫ Russian")
    item3 = types.KeyboardButton("üá¨üáß English")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)

    if time.time() - update_date > 24*60*60:
        df = parsers.update()
        df.to_excel('loan_data copy.xlsx')

    bot.send_message(message.chat.id, welcome_msg, parse_mode = "html", reply_markup=markup)
    set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.LANGUAGE.value)
def get_language_handler(message):
    global session_handler
    if message.text[3:] == "Tajik":
        set_language(message.chat.id, session_handler, message.text[3:])
        
        #Keyboard inline - tajik
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑")
        item2 = types.KeyboardButton("–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä")
        item3 = types.KeyboardButton("–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑")
        item4 = types.KeyboardButton('–ö”Ø–º–∞–∫')
        item5 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)

        bot.send_message(message.chat.id, "–ú–∞–Ω –±–∞ –∫–æ—Ä —Ç–∞—ë—Ä–∞–º!\n–ú–∞–Ω —á”£ —Ç–∞–≤—Ä –±–∞ —à—É–º–æ –∫”Ø–º–∞–∫ —Ä–∞—Å–æ–Ω–∞–º?", parse_mode="html", reply_markup=markup)
        set_state(message.chat.id, session_handler, config.States.ACTION.value)
    
    elif message.text[3:] == "Russian":
        set_language(message.chat.id, session_handler, message.text[3:])
        
        #Keyboard inline - russian
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º")
        item2 = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
        item3 = types.KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
        item4 = types.KeyboardButton("–ü–æ–º–æ—â—å")
        item5 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)

        bot.send_message(message.chat.id, "–Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–ß–µ–º –º–æ–≥—É —è –≤–∞–º –ø–æ–º–æ—á—å?", parse_mode="html", reply_markup=markup)
        set_state(message.chat.id, session_handler, config.States.ACTION.value)
    
    elif message.text[3:] == "English":
        set_language(message.chat.id, session_handler, message.text[3:])

        #Keyboard inline - english
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("Help with a loan")
        item2 = types.KeyboardButton("Exchange Rates")
        item3 = types.KeyboardButton("Apply for loan")
        item4 = types.KeyboardButton("Help")
        item5 = types.KeyboardButton("Back")
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)

        bot.send_message(message.chat.id, "I am ready to work!\nHow can i help you", parse_mode="html", reply_markup=markup)
        set_state(message.chat.id, session_handler, config.States.ACTION.value)
    else:
        if message.text[3:] == "Tajik":
            bot.send_message(message.chat.id, "–ú–∞–Ω –Ω–∞—Ñ–∞“≥–º–∏–¥–∞–º, –∫–∏ —à—É–º–æ —á”£ –¥–∞—Ä –Ω–∞–∑–∞—Ä –¥–æ—Ä–µ–¥!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)
        elif message.text[3:] == "Russian":
            bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç—É –≤ –≤–∏–¥—É!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)
        elif message.text[3:] == "English":
            bot.send_message(message.chat.id, "I don't know what you mean!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)
        else:
            bot.send_message(message.chat.id, "I don't know what you mean!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)
    
@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.ACTION.value)
def get_start(message):
    """Action State"""
    global session_handler

    if get_language(message.chat.id, session_handler) == "Tajik":
        if message.text == "–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑":           
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£")
            item2 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –º–æ—à–∏–Ω")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "–ë–æ –∫–∞–¥–æ–º –º–∞“õ—Å–∞–¥ —à—É–º–æ –º–µ—Ö–æ“≥–µ–¥ “õ–∞—Ä–∑ –≥–∏—Ä–µ–¥?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_PURPOSE.value)
    
        elif message.text == "–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä":
            bot.send_message(message.chat.id, "–ö–∞–¥–æ–º –∞—Å—ä–æ—Ä—Ä–æ –∏–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?\n–ú–∞—Å–∞–ª–∞–Ω: USD, RUB, KGS", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_FROM.value)
        
        elif message.text =='–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ê–º–æ–Ω–∞—Ç–±–æ–Ω–∫")
            item2 = types.KeyboardButton("–ö–æ–º–º–µ—Ä—Å –ë–æ–Ω–∫–∏ –¢–æ—á–∏–∫–∏—Å—Ç–æ–Ω")
            item3 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –±–æ–Ω–∫—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_SELECT.value)

        elif message.text == "–ë–æ–∑–≥–∞—à—Ç":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üáπüáØ Tajik")
            item2 = types.KeyboardButton("üá∑üá∫ Russian")
            item3 = types.KeyboardButton("üá¨üáß English")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id, "–®—É–º–æ –±–∞ –∫–∞–¥–æ–º –∑–∞–±–æ–Ω –±–∞—Ä—Ç–∞—Ä”£ –º–µ–¥–∏“≥–µ–¥?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)
        
        elif message.text == "–ö”Ø–º–∞–∫":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑")
            item2 = types.KeyboardButton("–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä")
            item3 = types.KeyboardButton("–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑")
            item4 = types.KeyboardButton('–ö”Ø–º–∞–∫')
            item5 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)
            markup.add(item5)

            bot.send_message(message.chat.id, "–ò–Ω –∞—Å—Ç –¥–∞—Å—Ç—É—Ä–∏ –∫–æ—Ä–±–∞—Ä –±–∞—Ä–æ–∏ –±–æ—Ç –≤–∞ —á”£ —Ç–∞–≤—Ä –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞–Ω–∏ –æ–Ω", parse_mode="html")
            bot.send_message(message.chat.id, "https://zefs-cyber.github.io/loansInTajikistan.github.io/", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)

        else:
            bot.send_message(message.chat.id, "–ú–∞–Ω —à—É–º–æ—Ä–æ –Ω–∞–º–µ—Ñ–∞“≥–º–∞–º, –ª—É—Ç—Ñ–∞–Ω —Ç–∞–∫—Ä–æ—Ä –∫—É–Ω–µ–¥!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.ACTION.value)
            

    elif get_language(message.chat.id, session_handler) == "Russian":
        if message.text == "–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç")
            item2 = types.KeyboardButton("–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "C –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_PURPOSE.value)

        elif message.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç":
            bot.send_message(message.chat.id, "–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?\n–ù–∞–ø—Ä–∏–º–µ—Ä: USD, RUB, KGS", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_FROM.value)

        elif message.text =='–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ê–º–æ–Ω–∞—Ç–±–∞–Ω–∫")
            item2 = types.KeyboardButton("–ö–æ–º–µ—Ä—á–µ—Å–∫–∏–π –ë–∞–Ω–∫ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞")
            item3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_SELECT.value)
        
        elif message.text == "–ù–∞–∑–∞–¥":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üáπüáØ Tajik")
            item2 = types.KeyboardButton("üá∑üá∫ Russian")
            item3 = types.KeyboardButton("üá¨üáß English")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id, "–ö–∞–∫–æ–π —è–∑—ã–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)
        
        elif message.text == "–ü–æ–º–æ—â—å":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º")
            item2 = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
            item3 = types.KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
            item4 = types.KeyboardButton("–ü–æ–º–æ—â—å")
            item5 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)
            markup.add(item5)

            bot.send_message(message.chat.id, "–í–æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ—Ç–∞ –∏ –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", parse_mode="html")
            bot.send_message(message.chat.id, "https://zefs-cyber.github.io/loansInTajikistan.github.io/", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)
        else:
            bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.ACTION.value)
    
    elif get_language(message.chat.id, session_handler) == "English":
        if message.text == "Help with a loan":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Consumer Loan")
            item2 = types.KeyboardButton("Car Loan")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "For what purpose do you want to get loan?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_PURPOSE.value)

        elif message.text == "Exchange Rates":
            bot.send_message(message.chat.id, "What currency do you want to change?\nFor example: USD, RUB, KGS", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_FROM.value)
        
        elif message.text == 'Apply for loan':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Amonatbank")
            item2 = types.KeyboardButton("Commerce Bank Tajikistan")
            item3 = types.KeyboardButton("Back")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id, "Please select bank", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_SELECT.value)

        elif message.text == "Back":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üáπüáØ Tajik")
            item2 = types.KeyboardButton("üá∑üá∫ Russian")
            item3 = types.KeyboardButton("üá¨üáß English")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id, "What language do you prefer?", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LANGUAGE.value)

        elif message.text == "Help":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Help with a loan")
            item2 = types.KeyboardButton("Exchange Rates")
            item3 = types.KeyboardButton("Apply for loan")
            item4 = types.KeyboardButton("Help")
            item5 = types.KeyboardButton("Back")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)
            markup.add(item5)

            bot.send_message(message.chat.id, "Here is the user manual for the bot and how to use it", parse_mode="html")
            bot.send_message(message.chat.id, "https://zefs-cyber.github.io/loansInTajikistan.github.io/", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)

        else:
            bot.send_message(message.chat.id, "I don't understand you, please repeat!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.ACTION.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.CURRENCY_FROM.value)
def get_currency_from(message):
    global session_handler
    if message.text.upper() in ex['NAMES_OTHER']:
        
        if len(session_handler[message.chat.id][2]) < 3:
            session_handler[message.chat.id][2].append(message.text.upper())
        else:
            session_handler[message.chat.id][2][0] = message.text.upper()

        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–®—É–º–æ –±–∞ –∫–∞–¥–æ–º –∞—Å—ä–æ—Ä –∏–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?\n–ú–∞—Å–∞–ª–∞–Ω: USD, RUB, KGS", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_TO.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?\n–ù–∞–ø—Ä–∏–º–µ—Ä: USD, RUB, KGS", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_TO.value)

        else:
            bot.send_message(message.chat.id, "To what currency do you want to change?\nFor example: USD, RUB, KGS", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_TO.value)

    else:        
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –∞—Å—ä–æ—Ä–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_FROM.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_FROM.value)

        else:
            bot.send_message(message.chat.id, "Please enter the correct currency!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_FROM.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.CURRENCY_TO.value)
def get_currency_to(message):
    global session_handler

    if message.text.upper() in ex['NAMES_OTHER']:
        if len(session_handler[message.chat.id][2]) < 3:
            session_handler[message.chat.id][2].append(message.text.upper())
        else:
            session_handler[message.chat.id][2][1] = message.text.upper()

        currency_from = session_handler[message.chat.id][2][0]

        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, f"–®—É–º–æ —á–∞–Ω–¥ {currency_from} –º–µ—Ö–æ“≥–µ–¥ –∏–≤–∞–∑ –∫—É–Ω–µ–¥?", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_AMOUNT.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ {currency_from} –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_AMOUNT.value)

        else:
            bot.send_message(message.chat.id, f"How many {currency_from} do you want to change?", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_AMOUNT.value)

    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –∞—Å—ä–æ—Ä–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_TO.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_TO.value)

        else:
            bot.send_message(message.chat.id, "Please enter the correct currency!", parse_mode="html")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_TO.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.CURRENCY_AMOUNT.value)
def get_currency_amount(message):
    global session_handler

    if message.text.isnumeric():
        if len(session_handler[message.chat.id][2]) < 3:
            session_handler[message.chat.id][2].append(int(message.text))
        else:
            session_handler[message.chat.id][2][2] = int(message.text)

        print(session_handler[message.chat.id][2])
        amount = session_handler[message.chat.id][2][2]
        currency_from = session_handler[message.chat.id][2][0]
        currency_to = session_handler[message.chat.id][2][1]

        i1 = ex['NAMES_OTHER'].index(currency_from)
        i2 = ex['NAMES_OTHER'].index(currency_to)
        val = amount * (float(ex['UNIT'][i2]) / float(ex['RATE'][i2])) / (float(ex['UNIT'][i1]) / float(ex['RATE'][i1]))
        
        amount = session_handler[message.chat.id][2][2]
        currency_from = session_handler[message.chat.id][2][0]
        currency_to = session_handler[message.chat.id][2][1]

        if get_language(message.chat.id, session_handler) == 'Tajik':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑")
            item2 = types.KeyboardButton("–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä")
            item3 = types.KeyboardButton("–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑")
            item4 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)

            bot.send_message(message.chat.id, f"–ë–æ {amount}{currency_from} —à—É–º–æ {round(val, 2)}{currency_to} –º–µ–≥–∏—Ä–µ–¥", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º")
            item2 = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
            item3 = types.KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
            item4 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)

            bot.send_message(message.chat.id, f"–ó–∞ {amount}{currency_from} –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {round(val, 2)}{currency_to}", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Help with a loan")
            item2 = types.KeyboardButton("Exchange Rates")
            item3 = types.KeyboardButton("Apply for loan")
            item4 = types.KeyboardButton("Back")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)

            bot.send_message(message.chat.id, f"For {amount}{currency_from} you will get {round(val, 2)}{currency_to}", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)
        save_json(session_handler)

    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_AMOUNT.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã!")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_AMOUNT.value)

        else:
            bot.send_message(message.chat.id, "Please enter numbers!")
            set_state(message.chat.id, session_handler, config.States.CURRENCY_AMOUNT.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.LOAN_PURPOSE.value)
def get_loan_purpose(message):
    global session_handler

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('TJS')
    item2 = types.KeyboardButton('USD')
    markup.add(item1)
    markup.add(item2)

    if get_language(message.chat.id, session_handler) == 'Tajik':

        if message.text == "“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£" or message.text == "“ö–∞—Ä–∑–∏ –º–æ—à–∏–Ω":

            if message.text == "“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£":
                if len(session_handler[message.chat.id][3]) < 4:
                    session_handler[message.chat.id][3].append('consumer loan')
                else:
                    session_handler[message.chat.id][3][0] = ('consumer loan')

            else:
                if len(session_handler[message.chat.id][3]) < 4:
                    session_handler[message.chat.id][3].append('car loan')
                else:
                    session_handler[message.chat.id][3][0] = ('car loan')

            bot.send_message(message.chat.id, "–®—É–º–æ –±–æ –∫–∞–¥–æ–º –∞—Å—ä–æ—Ä “õ–∞—Ä–∑ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",  reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_CURRENCY.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£")
            item2 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –º–æ—à–∏–Ω")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "–ë–æ –∫–∞–¥–æ–º –º–∞“õ—Å–∞–¥ —à—É–º–æ –º–µ—Ö–æ“≥–µ–¥ “õ–∞—Ä–∑ –≥–∏—Ä–µ–¥?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_PURPOSE.value)

    elif get_language(message.chat.id, session_handler) == 'Russian':

        if message.text == '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç' or message.text == '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç':

            if message.text == "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç":
                if len(session_handler[message.chat.id][3]) < 4:
                    session_handler[message.chat.id][3].append('consumer loan')
                else:
                    session_handler[message.chat.id][3][0] = ('consumer loan')
                
            else:
                if len(session_handler[message.chat.id][3]) < 4:
                    session_handler[message.chat.id][3].append('car loan')
                else:
                    session_handler[message.chat.id][3][0] = ('car loan')

            bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç?", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_CURRENCY.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç")
            item2 = types.KeyboardButton("–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "C –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_PURPOSE.value)

    else:
        if message.text == 'Consumer Loan' or message.text == 'Car Loan':
            
            if message.text == "Consumer Loan":
                if len(session_handler[message.chat.id][3]) < 4:
                    session_handler[message.chat.id][3].append('consumer loan')
                else:
                    session_handler[message.chat.id][3][0] = ('consumer loan')

            else:
                if len(session_handler[message.chat.id][3]) < 4:
                    session_handler[message.chat.id][3].append('car loan')
                else:
                    session_handler[message.chat.id][3][0] = ('car loan')

            bot.send_message(message.chat.id, "In what currency do you want to take a loan?", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_CURRENCY.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Consumer Loan")
            item2 = types.KeyboardButton("Car Loan")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "For what purpose do you want to get loan?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_PURPOSE.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.LOAN_CURRENCY.value)
def get_loan_currency(message):
    global session_handler

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('TJS')
    item2 = types.KeyboardButton('USD')
    markup.add(item1)
    markup.add(item2)
    
    if message.text == "TJS" or message.text == "USD":
        if len(session_handler[message.chat.id][3]) < 4:
            session_handler[message.chat.id][3].append(message.text.lower())
        else:
            session_handler[message.chat.id][3][1] = message.text.lower()

        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–®—É–º–æ —á”£ “õ–∞–¥–∞—Ä “õ–∞—Ä–∑ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω –º–µ—Ö–æ“≥–µ–¥?")
            set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç?")
            set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)

        else:
            bot.send_message(message.chat.id, "How much do you want to borrow?")
            set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)

    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —è–∫–µ –∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç“≥–æ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_CURRENCY.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_CURRENCY.value)

        else:
            bot.send_message(message.chat.id, "Please select one of the options!", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.LOAN_CURRENCY.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.LOAN_AMOUNT.value)
def get_loan_amount(message):
    if (message.text.isnumeric() or is_float(message.text)):
        if convert_float(message.text) <= 0:
            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –∞–∑ —Å–∏—Ñ—Ä –∫–∞–ª–æ–Ω—Ç–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
                set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)

            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –±–æ–ª—å—à–µ –Ω—É–ª—è")
                set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)

            else:
                bot.send_message(message.chat.id, "Please enter a number greater than zero")
                set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)
        else:

            if len(session_handler[message.chat.id][3]) < 4:
                session_handler[message.chat.id][3].append(convert_float(message.text))
            else:
                session_handler[message.chat.id][3][2] = convert_float(message.text)

            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–®—É–º–æ –±–∞ –∫–∞–¥–æ–º –ú”Ø“≥–ª–∞—Ç “õ–∞—Ä–∑ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω –º–µ—Ö–æ“≥–µ–¥?\n(–õ—É—Ç—Ñ–∞–Ω, –¥–∞–≤—Ä–∞—Ä–æ –±–æ –º–æ“≥“≥–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥)")
                set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)

            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç?\n(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö)")
                set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)

            else:
                bot.send_message(message.chat.id, "For how long do you want to take out a loan?\n(Please enter the period in months)")
                set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)

    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")
            set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)
        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã!")
            set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)
        else:
            bot.send_message(message.chat.id, "Please enter numbers!")
            set_state(message.chat.id, session_handler, config.States.LOAN_AMOUNT.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.LOAN_DURATION.value)
def get_loan_duration(message):
    global session_handler
    
    if (message.text.isnumeric() or is_float(message.text)):
        if convert_float(message.text) <= 0:
            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –∞–∑ —Å–∏—Ñ—Ä –∫–∞–ª–æ–Ω—Ç–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
                set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)

            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –±–æ–ª—å—à–µ –Ω—É–ª—è")
                set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)

            else:
                bot.send_message(message.chat.id, "Please enter a number greater than zero")
                set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)
        else:

            if len(session_handler[message.chat.id][3]) < 4:
                session_handler[message.chat.id][3].append(convert_float(message.text))
            else:
                session_handler[message.chat.id][3][3] = convert_float(message.text)

            loan_user = session_handler[message.chat.id][3]
            language = get_language(message.chat.id, session_handler)
            exp_image(loan_user, language)

            print(f'{message.from_user.first_name} - image exported; {str(session_handler[message.chat.id])}; {language}')


            if len(check(loan_user, language)) > 0:
                if language == 'Tajik':
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑")
                    item2 = types.KeyboardButton("–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä")
                    item3 = types.KeyboardButton("–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑")
                    item4 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
                    markup.add(item1)
                    markup.add(item2)
                    markup.add(item3)
                    markup.add(item4)
                    bot.send_message(message.chat.id, "–ù–∞—Ç–∏“∑–∞“≥–æ–∏ –±–∞—Ä–æ–∏ —Ç–∞–ª–∞–±–æ—Ç–∏ —à—É–º–æ:", reply_markup=markup)
                    bot.send_photo(message.chat.id, open('result.png', 'rb'))
                    bot.send_message(message.chat.id, check(loan_user, language)['Bank id'].values[0] + ' —Ñ–æ–∏–∑–∏ –ø–∞—Å—Ç—Ç–∞—Ä–∏–Ω—Ä–æ –±–∞—Ä–æ–∏ “õ–∞—Ä–∑–µ, –∫–∏ —à—É–º–æ “∑—É—Å—Ç—É“∑”Ø –º–µ–∫–∞—Ä–¥–µ–¥, –ø–µ—à–Ω–∏“≥–æ–¥ –º–µ–∫—É–Ω–∞–¥! –ü–∞–π–≤–∞–Ω–¥ –±–∞ —Å–∞–π—Ç –±–æ–Ω–∫:')
                    bot.send_message(message.chat.id, websites[banks_tj.index(check(loan_user, language)['Bank id'].values[0])])
                    set_state(message.chat.id, session_handler, config.States.ACTION.value)
                
                elif get_language(message.chat.id, session_handler) == 'Russian':
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º")
                    item2 = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
                    item3 = types.KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
                    item4 = types.KeyboardButton("–ù–∞–∑–∞–¥")
                    markup.add(item1)
                    markup.add(item2)
                    markup.add(item3)
                    markup.add(item4)

                    bot.send_message(message.chat.id, "–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:", reply_markup=markup)
                    bot.send_photo(message.chat.id, open('result.png', 'rb'))
                    bot.send_message(message.chat.id, check(loan_user, language)['Bank id'].values[0] + ' –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏! –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –±–∞–Ω–∫–∞:')
                    bot.send_message(message.chat.id, websites[banks_ru.index(check(loan_user, language)['Bank id'].values[0])])
                    set_state(message.chat.id, session_handler, config.States.ACTION.value)

                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("Help with a loan")
                    item2 = types.KeyboardButton("Exchange Rates")
                    item3 = types.KeyboardButton("Apply for loan")
                    item4 = types.KeyboardButton("Back")
                    markup.add(item1)
                    markup.add(item2)
                    markup.add(item3)
                    markup.add(item4)

                    bot.send_message(message.chat.id, "Here are the results for your query:", reply_markup=markup)
                    bot.send_photo(message.chat.id, open('result.png', 'rb'))
                    bot.send_message(message.chat.id, check(loan_user, language)['Bank id'].values[0] + ' offers lowest interest rates for the loan that your were searching! Link to bank website:')
                    bot.send_message(message.chat.id, websites[banks_en.index(check(loan_user, language)['Bank id'].values[0])])
                    set_state(message.chat.id, session_handler, config.States.ACTION.value)

            else:
                if language == 'Tajik':
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑")
                    item2 = types.KeyboardButton("–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä")
                    item3 = types.KeyboardButton("–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑")
                    item4 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
                    markup.add(item1)
                    markup.add(item2)
                    markup.add(item3)
                    markup.add(item4)

                    if loan_user[0] == 'consumer loan':
                        if loan_user[1] == 'tjs':
                            if loan_user[3]>48:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º—É–¥–¥–∞—Ç “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")
                            elif loan_user[2]>15000:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º–∞–±–ª–∞“ì “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")
                        else:
                            if loan_user[3]>48:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º—É–¥–¥–∞—Ç “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")
                            elif loan_user[2]>1500:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º–∞–±–ª–∞“ì “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")
                    else:
                        if loan_user[1] == 'tjs':
                            if loan_user[3]>60:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º—É–¥–¥–∞—Ç “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")
                            elif loan_user[2]>250000:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º–∞–±–ª–∞“ì “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")
                        else:
                            if loan_user[3]>60:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º—É–¥–¥–∞—Ç “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")
                            elif loan_user[2]>25000:
                                bot.send_message(message.chat.id, "–ë–æ–Ω–∫“≥–æ –±–∞—Ä–æ–∏ –∏–Ω –º–∞–±–ª–∞“ì “õ–∞—Ä–∑ –Ω–∞–º–µ–¥–∏“≥–∞–Ω–¥")

                    bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –±–æ–∑ —Å–∞—Ä –∫—É–Ω–µ–¥", reply_markup=markup)
                    set_state(message.chat.id, session_handler, config.States.ACTION.value)

                elif language == 'Russian':
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º")
                    item2 = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
                    item3 = types.KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
                    item4 = types.KeyboardButton("–ù–∞–∑–∞–¥")
                    markup.add(item1)
                    markup.add(item2)
                    markup.add(item3)
                    markup.add(item4)

                    if loan_user[0] == 'consumer loan':
                        if loan_user[1] == 'tjs':
                            if loan_user[3]>48:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫–æ–π —Å—Ä–æ–∫")
                            elif loan_user[2]>15000:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫—É—é —Å—É–º–º—É")
                        else:
                            if loan_user[3]>48:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫–æ–π —Å—Ä–æ–∫")
                            elif loan_user[2]>1500:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫—É—é —Å—É–º–º—É")
                    else:
                        if loan_user[1] == 'tjs':
                            if loan_user[3]>60:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫–æ–π —Å—Ä–æ–∫")
                            elif loan_user[2]>250000:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫—É—é —Å—É–º–º—É")
                        else:
                            if loan_user[3]>60:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫–æ–π —Å—Ä–æ–∫")
                            elif loan_user[2]>25000:
                                bot.send_message(message.chat.id, "–ë–∞–Ω–∫–∏ –Ω–µ –≤—ã–¥–∞—é—Ç –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Ç–∞–∫—É—é —Å—É–º–º—É")

                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=markup)
                    set_state(message.chat.id, session_handler, config.States.ACTION.value)

                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("Help with a loan")
                    item2 = types.KeyboardButton("Exchange Rates")
                    item3 = types.KeyboardButton("Apply for loan")
                    item4 = types.KeyboardButton("Back")
                    markup.add(item1)
                    markup.add(item2)
                    markup.add(item3)
                    markup.add(item4)

                    if loan_user[0] == 'consumer loan':
                        if loan_user[2] == 'tjs':
                            if loan_user[3]>48:
                                bot.send_message(message.chat.id, "Banks don't lend for that duration")
                            elif loan_user[2]>15000:
                                bot.send_message(message.chat.id, "Banks don't lend for that amount")
                        else:
                            if loan_user[3]>48:
                                bot.send_message(message.chat.id, "Banks don't lend for that duration")
                            elif loan_user[2]>1500:
                                bot.send_message(message.chat.id, "Banks don't lend for that amount")
                    else:
                        if loan_user[2] == 'tjs':
                            if loan_user[3]>60:
                                bot.send_message(message.chat.id, "Banks don't lend for that duration")
                            elif loan_user[2]>250000:
                                bot.send_message(message.chat.id, "Banks don't lend for that amount")
                        else:
                            if loan_user[3]>60:
                                bot.send_message(message.chat.id, "Banks don't lend for that duration")
                            elif loan_user[2]>25000:
                                bot.send_message(message.chat.id, "Banks don't lend for that amount")
                                
                    bot.send_message(message.chat.id, "Please start again", reply_markup=markup)
                    set_state(message.chat.id, session_handler, config.States.ACTION.value)
            save_json(session_handler)

    else:
        if language == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")
            set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)

        elif language == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã!")
            set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)
            
        else:
            bot.send_message(message.chat.id, "Please enter numbers!")
            set_state(message.chat.id, session_handler, config.States.LOAN_DURATION.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_SELECT.value)
def apply(message):
    global session_handler
    if get_language(message.chat.id, session_handler) == 'Tajik':
        if message.text in ["–ê–º–æ–Ω–∞—Ç–±–æ–Ω–∫", "–ö–æ–º–º–µ—Ä—Å –ë–æ–Ω–∫–∏ –¢–æ—á–∏–∫–∏—Å—Ç–æ–Ω"]:
            session_handler[message.chat.id][4].append(message.text)

            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –Ω–æ–º –≤–∞ –Ω–∞—Å–∞–±–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
            set_state(message.chat.id, session_handler, config.States.APPLY_NAME.value)
        elif message.text == '–ë–æ–∑–≥–∞—à—Ç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑")
            item2 = types.KeyboardButton("–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä")
            item3 = types.KeyboardButton("–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑")
            item4 = types.KeyboardButton('–ö”Ø–º–∞–∫')
            item5 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)
            markup.add(item5)

            bot.send_message(message.chat.id, "–ú–∞–Ω –±–∞ –∫–æ—Ä —Ç–∞—ë—Ä–∞–º!\n–ú–∞–Ω —á”£ —Ç–∞–≤—Ä –±–∞ —à—É–º–æ –∫”Ø–º–∞–∫ —Ä–∞—Å–æ–Ω–∞–º?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ê–º–æ–Ω–∞—Ç–±–æ–Ω–∫")
            item2 = types.KeyboardButton("–ö–æ–º–º–µ—Ä—Å –ë–æ–Ω–∫–∏ –¢–æ—á–∏–∫–∏—Å—Ç–æ–Ω")
            markup.add(item1)
            markup.add(item2)

            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —è–∫–µ –∞–∑ –±–æ–Ω–∫“≥–æ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_SELECT.value)

    elif get_language(message.chat.id, session_handler) == 'Russian':
        if message.text in ["–ê–º–æ–Ω–∞—Ç–±–∞–Ω–∫", "–ö–æ–º–µ—Ä—á–µ—Å–∫–∏–π –ë–∞–Ω–∫ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞"]:
            session_handler[message.chat.id][4].append(message.text)

            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—àe –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
            set_state(message.chat.id, session_handler, config.States.APPLY_NAME.value)
        
        elif message.text =='–ù–∞–∑–∞–¥':
            #Keyboard inline - russian
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º")
            item2 = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
            item3 = types.KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
            item4 = types.KeyboardButton("–ü–æ–º–æ—â—å")
            item5 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)
            markup.add(item5)

            bot.send_message(message.chat.id, "–Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–ß–µ–º –º–æ–≥—É —è –≤–∞–º –ø–æ–º–æ—á—å?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)
        
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ê–º–æ–Ω–∞—Ç–±–∞–Ω–∫")
            item2 = types.KeyboardButton("–ö–æ–º–µ—Ä—á–µ—Å–∫–∏–π –ë–∞–Ω–∫ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞")
            markup.add(item1)
            markup.add(item2)

            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –±–∞–Ω–∫–æ–≤", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_SELECT.value)

    else:
        if message.text in ["Amonatbank", "Commerce Bank Tajikistan"]:
            session_handler[message.chat.id][4].append(message.text)

            bot.send_message(message.chat.id, "Please enter your first and last name")
            set_state(message.chat.id, session_handler, config.States.APPLY_NAME.value)
        elif message.text == 'Back':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Help with a loan")
            item2 = types.KeyboardButton("Exchange Rates")
            item3 = types.KeyboardButton("Apply for loan")
            item4 = types.KeyboardButton("Help")
            item5 = types.KeyboardButton("Back")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)
            markup.add(item5)

            bot.send_message(message.chat.id, "I am ready to work!\nHow can i help you", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.ACTION.value)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Amonatbank")
            item2 = types.KeyboardButton("Commerce Bank Tajikistan")
            markup.add(item1)
            markup.add(item2)

            bot.send_message(message.chat.id, "Please select one of the banks", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_SELECT.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_NAME.value)
def apply_name(message):
    name = message.text.split(' ')[0]
    surname = message.text.split(' ')[1]
    session_handler[message.chat.id][4].append(name)
    session_handler[message.chat.id][4].append(surname)
    if get_language(message.chat.id, session_handler) == 'Tajik':
        bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
        set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)
    elif get_language(message.chat.id, session_handler) == 'Russian':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)
    else:
        bot.send_message(message.chat.id, "Please enter your phone number")
        set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_PHONE.value)
def apply_phone(message):
    if message.text.isnumeric():
        if len(message.text) == 9:
            session_handler[message.chat.id][4].append(message.text)
            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –∞–∫—Å–∏ —à–∏–Ω–æ—Å–Ω–æ–º–∞–∏ —Ö—É–¥—Ä–æ –¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ JPG —Ñ–∏—Ä–∏—Å—Ç–µ–¥")
                set_state(message.chat.id, session_handler, config.States.APPLY_PHOTO.value)
            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –ø–∞—Å—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG")
                set_state(message.chat.id, session_handler, config.States.APPLY_PHOTO.value)
            else:
                bot.send_message(message.chat.id, "Please send photo of your passport in JPG format")
                set_state(message.chat.id, session_handler, config.States.APPLY_PHOTO.value)
        else:
            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
                set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)
            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)
            else:
                bot.send_message(message.chat.id, "Please enter correct phone number")
                set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)
    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
            set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)
        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã")
            set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)
        else:
            bot.send_message(message.chat.id, "Please enter numbers")
            set_state(message.chat.id, session_handler, config.States.APPLY_PHONE.value)

@bot.message_handler(content_types=['photo'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_PHOTO.value)
def apply_photo(message):
    
    photo_id = message.photo[-1].file_id
    file_id = bot.get_file(photo_id)
    name, extension = os.path.splitext(file_id.file_path)

    downloaded = bot.download_file(file_id.file_path) 
    src = str(message.chat.id) + str(extension)
    with open(src, 'wb') as new:
        new.write(downloaded)

    if find_tj(src):
        session_handler[message.chat.id][4].append(src)

        if get_language(message.chat.id, session_handler) == 'Tajik':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£")
            item2 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –º–æ—à–∏–Ω")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "–ö–∞–±—É–ª –∫–∞—Ä–¥–∞ —à—É–¥!")
            bot.send_message(message.chat.id, "–ë–æ –∫–∞–¥–æ–º –º–∞“õ—Å–∞–¥ —à—É–º–æ –º–µ—Ö–æ“≥–µ–¥ “õ–∞—Ä–∑ –≥–∏—Ä–µ–¥?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_PURPOSE.value)  
        elif get_language(message.chat.id, session_handler) == 'Russian':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç")
            item2 = types.KeyboardButton("–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ!")
            bot.send_message(message.chat.id, "C –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_PURPOSE.value)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Consumer Loan")
            item2 = types.KeyboardButton("Car Loan")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "Recieved!")
            bot.send_message(message.chat.id, "For what purpose do you want to get loan?", parse_mode="html", reply_markup=markup)   
            set_state(message.chat.id, session_handler, config.States.APPLY_PURPOSE.value)
    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω –∞–∫—Å–∏ —à–∏–Ω–æ—Å–Ω–æ–º–∞–∏ —Ç–æ—á–∏–∫–∏–∞—Ç–æ–Ω—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥!")
            set_state(message.chat.id, session_handler, config.States.APPLY_PHOTO.value)
        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –¢–∞–¥–∂–∏–∫—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞!")
            set_state(message.chat.id, session_handler, config.States.APPLY_PHOTO.value)
        else:
            bot.send_message(message.chat.id, "Please send a photo of your Tajik passport!")
            set_state(message.chat.id, session_handler, config.States.APPLY_PHOTO.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_PURPOSE.value)
def apply_purpose(message):
    global session_handler

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('TJS')
    item2 = types.KeyboardButton('USD')
    markup.add(item1)
    markup.add(item2)

    if get_language(message.chat.id, session_handler) == 'Tajik':
        if message.text == "“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£" or message.text == "“ö–∞—Ä–∑–∏ –º–æ—à–∏–Ω":
            if message.text == "“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£":
                session_handler[message.chat.id][4].append('consumer loan')
            else:
                session_handler[message.chat.id][3].append('car loan')

            bot.send_message(message.chat.id, "–®—É–º–æ –±–æ –∫–∞–¥–æ–º –∞—Å—ä–æ—Ä “õ–∞—Ä–∑ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω –º–µ—Ö–æ“≥–µ–¥?",  reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –∏—Å—Ç–µ—ä–º–æ–ª”£")
            item2 = types.KeyboardButton("“ö–∞—Ä–∑–∏ –º–æ—à–∏–Ω")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "–ë–æ –∫–∞–¥–æ–º –º–∞“õ—Å–∞–¥ —à—É–º–æ –º–µ—Ö–æ“≥–µ–¥ “õ–∞—Ä–∑ –≥–∏—Ä–µ–¥?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)
    elif get_language(message.chat.id, session_handler) == 'Russian':
        if message.text == '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç' or message.text == '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç':
            if message.text == "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç":
                session_handler[message.chat.id][4].append('consumer loan')
            else:
                session_handler[message.chat.id][4].append('car loan')

            bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç?", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç")
            item2 = types.KeyboardButton("–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "C –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)
    else:
        if message.text == 'Consumer Loan' or message.text == 'Car Loan':
            if message.text == "Consumer Loan":
                session_handler[message.chat.id][3].append('consumer loan')
            else:
                    session_handler[message.chat.id][3].append('car loan')

            bot.send_message(message.chat.id, "In what currency do you want to take a loan?", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("Consumer Loan")
            item2 = types.KeyboardButton("Car Loan")
            markup.add(item1)
            markup.add(item2)
            bot.send_message(message.chat.id, "For what purpose do you want to get loan?", parse_mode="html", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_CURRENCY.value)
def apply_currency(message):
    global session_handler

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('TJS')
    item2 = types.KeyboardButton('USD')
    markup.add(item1)
    markup.add(item2)
    
    if message.text == "TJS" or message.text == "USD":
        session_handler[message.chat.id][4].append(message.text.lower())

        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–®—É–º–æ —á”£ “õ–∞–¥–∞—Ä “õ–∞—Ä–∑ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω –º–µ—Ö–æ“≥–µ–¥?")
            set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç?")
            set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)

        else:
            bot.send_message(message.chat.id, "How much do you want to borrow?")
            set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)

    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —è–∫–µ –∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç“≥–æ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥!", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)

        else:
            bot.send_message(message.chat.id, "Please select one of the options!", reply_markup=markup)
            set_state(message.chat.id, session_handler, config.States.APPLY_CURRENCY.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_AMOUNT.value)
def apply_amount(message):
    if (message.text.isnumeric() or is_float(message.text)):
        if convert_float(message.text) <= 0:
            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –∞–∑ —Å–∏—Ñ—Ä –∫–∞–ª–æ–Ω—Ç–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
                set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)

            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –±–æ–ª—å—à–µ –Ω—É–ª—è")
                set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)

            else:
                bot.send_message(message.chat.id, "Please enter a number greater than zero")
                set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)
        else:

            session_handler[message.chat.id][4].append(convert_float(message.text))
 
            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–®—É–º–æ –±–∞ –∫–∞–¥–æ–º –ú”Ø“≥–ª–∞—Ç “õ–∞—Ä–∑ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω –º–µ—Ö–æ“≥–µ–¥?\n(–õ—É—Ç—Ñ–∞–Ω, –¥–∞–≤—Ä–∞—Ä–æ –±–æ –º–æ“≥“≥–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥)")
                set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)

            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç?\n(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö)")
                set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)

            else:
                bot.send_message(message.chat.id, "For how long do you want to take out a loan?\n(Please enter the period in months)")
                set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)

    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")
            set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)
        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã!")
            set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)
        else:
            bot.send_message(message.chat.id, "Please enter numbers!")
            set_state(message.chat.id, session_handler, config.States.APPLY_AMOUNT.value)

@bot.message_handler(content_types=['text'], func=lambda message: get_current_state(message.chat.id, session_handler) == config.States.APPLY_DURATION.value)
def apply_duration(message):
    global session_handler
    
    if (message.text.isnumeric() or is_float(message.text)):
        if convert_float(message.text) <= 0:
            if get_language(message.chat.id, session_handler) == 'Tajik':
                bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –∞–∑ —Å–∏—Ñ—Ä –∫–∞–ª–æ–Ω—Ç–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥")
                set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)

            elif get_language(message.chat.id, session_handler) == 'Russian':
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –±–æ–ª—å—à–µ –Ω—É–ª—è")
                set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)

            else:
                bot.send_message(message.chat.id, "Please enter a number greater than zero")
                set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)
        else:
            session_handler[message.chat.id][4].append(convert_float(message.text))
            if get_language(message.chat.id, session_handler) == 'Tajik':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–ö”Ø–º–∞–∫ –±–æ “õ–∞—Ä–∑")
                item2 = types.KeyboardButton("–ú—É–±–æ–¥–∏–ª–∞–∏ –∞—Å—ä–æ—Ä")
                item3 = types.KeyboardButton("–ê—Ä–∏–∑–∞ –±–∞ “õ–∞—Ä–∑")
                item4 = types.KeyboardButton("–ë–æ–∑–≥–∞—à—Ç")
                markup.add(item1)
                markup.add(item2)
                markup.add(item3)
                markup.add(item4)

                name = session_handler[message.chat.id][4][1] + ' ' + session_handler[message.chat.id][4][2]
                phone = session_handler[message.chat.id][4][3]
                summ = session_handler[message.chat.id][4][7]
                photo = os.path.abspath(session_handler[message.chat.id][4][4])
                currency = session_handler[message.chat.id][4][6]
                raeson = session_handler[message.chat.id][4][5]

                if session_handler[message.chat.id][4][0] == "–ê–º–æ–Ω–∞—Ç–±–æ–Ω–∫":
                    parsers.fill_amonatbank([name, phone, summ, photo])
                elif session_handler[message.chat.id][4][0] ==  "–ö–æ–º–º–µ—Ä—Å –ë–æ–Ω–∫–∏ –¢–æ—á–∏–∫–∏—Å—Ç–æ–Ω":
                    parsers.fill_cbt([currency, summ, name, phone])

                bot.send_message(message.chat.id, "–î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –∫–∞–±—É–ª —à—É–¥. –õ—É—Ç—Ñ–∞–Ω –∏–Ω—Ç–∏–∑–æ—Ä —à–∞–≤–µ–¥, –∫–∏ –Ω–∞–º–æ—è–Ω–¥–∞–≥–æ–Ω–∏ –±–æ–Ω–∫ –±–∞ —à—É–º–æ –∑–∞–Ω–≥ –∑–∞–Ω–∞–Ω–¥.", reply_markup=markup)
                set_state(message.chat.id, session_handler, config.States.ACTION.value)
                session_handler[message.chat.id][4] = []
            elif get_language(message.chat.id, session_handler) == 'Russian':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–ü–æ–º–æ—â—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º")
                item2 = types.KeyboardButton("–ö—É—Ä—Å –≤–∞–ª—é—Ç")
                item3 = types.KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
                item4 = types.KeyboardButton("–ù–∞–∑–∞–¥")
                markup.add(item1)
                markup.add(item2)
                markup.add(item3)
                markup.add(item4)

                name = session_handler[message.chat.id][4][1] + ' ' + session_handler[message.chat.id][4][2]
                phone = session_handler[message.chat.id][4][3]
                summ = session_handler[message.chat.id][4][7]
                photo = os.path.abspath(session_handler[message.chat.id][4][4])
                currency = session_handler[message.chat.id][4][6]
                raeson = session_handler[message.chat.id][4][5]

                if session_handler[message.chat.id][4][0] == "–ê–º–æ–Ω–∞—Ç–±–∞–Ω–∫":
                    parsers.fill_amonatbank([name, phone, summ, photo])
                elif session_handler[message.chat.id][4][0] ==  "–ö–æ–º–µ—Ä—á–µ—Å–∫–∏–π –ë–∞–Ω–∫ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞":
                    parsers.fill_cbt([currency, summ, name, phone])

                bot.send_message(message.chat.id, str(session_handler[message.chat.id][4]))
                bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–≤–æ–Ω–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –±–∞–Ω–∫–∞.", reply_markup=markup)
                set_state(message.chat.id, session_handler, config.States.ACTION.value)
                

                session_handler[message.chat.id][4] = []
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("Help with a loan")
                item2 = types.KeyboardButton("Exchange Rates")
                item3 = types.KeyboardButton("Apply for loan")
                item4 = types.KeyboardButton("Back")
                markup.add(item1)
                markup.add(item2)
                markup.add(item3)
                markup.add(item4)

                name = session_handler[message.chat.id][4][1] + ' ' + session_handler[message.chat.id][4][2]
                phone = session_handler[message.chat.id][4][3]
                summ = session_handler[message.chat.id][4][7]
                photo = os.path.abspath(session_handler[message.chat.id][4][4])
                currency = session_handler[message.chat.id][4][6]
                reason = session_handler[message.chat.id][4][5]

                if session_handler[message.chat.id][4][0] == "Amonatbank":
                    parsers.fill_amonatbank([name, phone, summ, photo])
                elif session_handler[message.chat.id][4][0] ==  "Commerce Bank Tajikistan":
                    parsers.fill_cbt([currency, summ, name, phone])


                bot.send_message(message.chat.id, "Your request has been accepted. Please wait until bank representatives will call you.", reply_markup=markup)
                set_state(message.chat.id, session_handler, config.States.ACTION.value)
                session_handler[message.chat.id][4] = []

    else:
        if get_language(message.chat.id, session_handler) == 'Tajik':
            bot.send_message(message.chat.id, "–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")
            set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)

        elif get_language(message.chat.id, session_handler) == 'Russian':
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã!")
            set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)
            
        else:
            bot.send_message(message.chat.id, "Please enter numbers!")
            set_state(message.chat.id, session_handler, config.States.APPLY_DURATION.value)

while True:
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        with open('log.txt', 'a') as file:
            file.write(e)


